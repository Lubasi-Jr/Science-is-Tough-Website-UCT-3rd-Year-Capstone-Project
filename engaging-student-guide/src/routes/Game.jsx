/* eslint-disable no-unused-vars */
import React, { useState,useEffect } from 'react';
import Confetti from 'react-confetti';//importing confetti to use when someone wins/completes all levels
import { useNavigate } from 'react-router-dom';
import { gameModel } from "../models/gameModel";
//const avatarUrl = 'https://as2.ftcdn.net/v2/jpg/01/40/46/19/1000_F_140461947_tWo9D0W8QQnrhzhCXJbDHIXblMV9BTZv.jpg';
const avatars = ['https://static.vecteezy.com/system/resources/previews/014/212/681/non_2x/female-user-profile-avatar-is-a-woman-a-character-for-a-screen-saver-with-emotions-for-website-and-mobile-app-design-illustration-on-a-white-isolated-background-vector.jpg',
  'https://img.freepik.com/premium-vector/symbol-male-user-icon-circle-profile-icon-vector-illustration_276184-154.jpg',
  'https://static.vecteezy.com/system/resources/previews/013/317/294/non_2x/incognito-icon-man-woman-face-with-glasses-black-and-white-graphic-spy-agent-line-and-glyph-icon-security-and-detective-hacker-sign-graphics-editable-stroke-linear-icon-free-vector.jpg'

];
/*Questions and tips generated by ChatGpt for the "Acing your exams" pdf*/
const levels = [
  { id: 1, question: "What is the purpose of consolidation week?", type :'multiple-choice',options:["To focus solely on assignments", "To prepare for exams without lectures or academic activities","To relax and take a break from studying","To practice timed exams with classmates"],correctAnswer: 1, position: { x: 100, y: 220 } },
  { id: 2, question: "Start Preparing Early: Organize your notes, identify weak areas, and practice past papers under timed conditions.", position: { x: 200, y: 190 } },
  { id: 3, question: "How long does the first semester exam period typically last?",type:'multiple-choice',options:["One week","Two weeks","Three weeks","Four weeks"] ,correctAnswer: 2, position: { x: 300, y: 220 } },
  { id: 4, question: "Manage Your Time Effectively: Create a daily schedule that balances 9-11 hours of study with breaks and activities that support well-being.", position: { x: 400, y: 300 } },
  { id: 5, question: "What is recommended to understand the structure and type of exam questions?",type:'multiple-choice',options:["Practicing in study groups","Reviewing past exam papers","Attending extra lectures","Hiring a tutor"] ,correctAnswer: 1, position: { x: 500, y: 250 } },
  { id: 6, question: "Maintain Your Well-Being: Focus on physical, mental, and social health by eating well, sleeping enough, and managing stress during exam season", position: { x: 600, y: 300 } },
  { id: 7, question: "How many hours of study are recommended daily during exam season?",type:'multiple-choice',options:["5-7 hours",
    "7-9 hours",
    "9-11 hours",
    "11-13 hours"] ,correctAnswer: 2 , position: { x: 700, y: 240 } },
  { id: 8, question: "What should you do if you miss an exam?",type :'multiple-choice',options:["You cannot reschedule it","Apply for a deferred exam with solid justification and documentation","Wait for the next exam session","Contact your professor for a makeup test"],correctAnswer: 1 , position: { x: 800, y: 220 } },
];
const game = new gameModel(levels)

function Game() {
  const [currentLevel, setCurrentLevel] = useState(0);
 // const [userAnswer, setUserAnswer] = useState("");
  const[selectedOption,setSelectedOption] = useState(null);
  const [error, setError] = useState("");
  const[selectAvatar,setSelectedAvatar] =useState(null);
  const[showConf,setShowConf] = useState(false);
  const navigate = useNavigate();
  const handleAnswerSubmit = () => {
    const currentQuestion = levels[currentLevel];
    
   if (currentQuestion.type === "multiple-choice") {
      // Check if the selected option is correct for multiple-choice questions
      if (selectedOption === currentQuestion.correctAnswer) {
        setCurrentLevel(currentLevel + 1);
        //setUserAnswer("");
        setSelectedOption(null);
        setError("");
      } else {
        setError("Incorrect answer, please try again!");//error message if incorrect option is selected
      }
    }
    else{
      setCurrentLevel(currentLevel + 1);//move to next level if a tip is displayed 
    }
  };

  const handleAvatar = (avatar)=>{
    setSelectedAvatar(avatar)
  }
  const pathCreater = () => {
    const radius = 50/2;//default circle diameter divided by 2 to get radius so draw line from center of previous to enxt level center
    let pathcalc = `M ${levels[0].position.x} ${levels[0].position.y+radius}`; // Moves from startimg point to next point
    for (let i = 1; i < currentLevel; i++) {
      const endX = levels[i].position.x;
      const endY = levels[i].position.y +radius;

      pathcalc += ` L ${endX} ${endY}`; //draws line from end of previous circle to next circle
    }
    return pathcalc;
  };
  useEffect(() => {
    if (currentLevel === levels.length) {//display confetti if the current level the user is on is the final level
      setShowConf(true);
    }
  }, [currentLevel]);

  if(!selectAvatar){//only display this if user has not yet selected an avatar to play as
    return (
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100px',marginTop:'100px'}}>
        <h1>Select Your Avatar:</h1>
        <button 
        style={{ position: 'absolute', top: '20px', left: '20px' ,borderRadius:'10px'}}
        onClick={() => navigate('/')} 
      >
        &lt; Back to Home
      </button>
        <div style={{gap:'20px',display: 'flex', justifyContent: 'center' }}>
          {avatars.map((avatar, index) => (
            <img
              key={index}
              src={avatar}
              alt={`Avatar ${index + 1}`}
              style={{
                width: '100px',//height and width of circle specified
                height: '100px',
                margin: '10px',
                cursor: 'pointer',
                //border: '2px solid transparent',
                borderRadius: '50%'//making it a circular shape
              }}
              onClick={() => handleAvatar(avatar)}
            />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div>
      <h1 style={{textAlign:'center'}}>Tough Game</h1>
      <button 
        style={{ position: 'absolute', top: '20px', left: '20px' ,borderRadius:'10px'}}
        onClick={() => navigate('/')} 
      >
        &lt; Back to Home
      </button>
      <div style={{ position: 'relative', height: '400px', width: '1000px', marginBottom: '50px' }}>
        <svg height="400" width="1000" style={{ position: 'absolute', top: '0', left: '0' }}>
          {/*Creating a path between circles*/}
          <path className="pathway"
            d={pathCreater()}
            stroke="pink"
            strokeWidth="7"
            fill="none"
          />
        </svg>
        {/*zIndex had to be used in order to ensure the level circle is above the question and its options.*/}
        <div style={{ position: 'relative', zIndex: 1 }}>
          {levels.map((level, index) => (
            <div
              key={level.id}
              style={{
                top: `${level.position.y}px`,
                left: `${level.position.x}px`,
                padding: '10px',
                borderRadius: '50%',//creating circular shape 
                backgroundColor: index <= currentLevel ? 'pink' : 'gray',
                color: 'white',//make text colour white
                textAlign: 'center',//center text in circle
                width: '50px',
                height: '50px',
                lineHeight: '30px',
                position: 'absolute',
              }}
            >
              {level.id}
              
              {index === currentLevel && (
                <img className='avatarimg'
                  src={selectAvatar}
                  alt="Avatar"
                  style={{
                    position: 'absolute',
                    top: '-60px',
                    left: '50%',
                    transform: 'translateX(-50%)',
                    width: '40px',
                    height: '40px',
                    //marginTop: '40px'
                  }}
                />
              )}
            </div>
          ))}
        </div>

        {currentLevel < levels.length ? (
          <div style={{ position: 'absolute',
            //ensure the levels questions/tips are displayed relative to that levels position
            top: `${levels[currentLevel].position.y + 150}px`, 
            left: `${levels[currentLevel].position.x - 100}px`, 
            width: '300px',zIndex: 2 }}>
           
            {levels[currentLevel].type === 'multiple-choice' ? (
               
            <div>
               <p>{levels[currentLevel].question}</p>
              {levels[currentLevel].options.map((option, index) => (
                <div key={index}>
                  <input
                    type="radio"//ensures users only select 1 option
                    id={`option-${index}`}
                    value={index}
                    checked={selectedOption === index}//check if the option selected matches the index answer specified
                    onChange={() => setSelectedOption(index)}//if user selects option user setSelectedOption to chnge option.
                  />
                 {/*This adds the label name to each circular option*/}
                  <label htmlFor={`option-${index}`}>{option}</label>
                </div>
              ))}
            </div>
            ):(
              <div>
                {/*Display a tip to users*/}
                <p className="tip"style={{ fontStyle: 'italic', color: '#555' }}><b>Helpful Tip: </b> {levels[currentLevel].question}</p>
              </div>
            )}
            <button style={{marginTop:'5px',borderRadius:'25px',justifyContent:'center',borderColor:'white'}} onClick={handleAnswerSubmit}>
            {levels[currentLevel].type === 'multiple-choice' ? 'Submit' : 'Continue'}</button>
            {error && <p style={{ color: '#c80036' }}>{error}</p>}
            
          </div>
        ) : ( 
          <>
      
          {/*Display congrats message and confetti when user completes game*/}
          <h2 style={{textAlign:'center',marginLeft:'500px'}}>Congratulations! You have completed all levels!</h2>
          {showConf && <Confetti />}
          </>
        )}
      </div>
    </div>
  );
};

export default Game;
